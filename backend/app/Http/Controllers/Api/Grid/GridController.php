<?php

namespace App\Http\Controllers\Api\Grid;

use App\Http\Controllers\Controller;
use App\Models\Grid;
use Illuminate\Support\Facades\Auth;
use App\Http\Resources\GridResource;
use App\Http\Requests\Grid\UpdateByLayoutIdRequest;
use App\Http\Requests\Grid\DeleteByLayoutIdRequest;
use App\Http\Requests\Grid\SaveNewGridRequest;
use App\Http\Requests\Grid\ResetUserGridsRequest;
use App\Traits\ApiResponses;

class GridController extends Controller
{
    use ApiResponses;
    /**
     * Display the authenticated user's grids as JSON
     * keyed by layoutId,
     * with the latest entries first.
     */
    public function index()
    {
        // gets all grid from authenticated user
        $grids = Auth::user()->grids()->latest()->get();

        // creates an array from $grids
        $resources = GridResource::collection($grids)->resolve();

        /**
         *  maps items to objects with key names generated by values of layoutId
         *  {
         *      "main": { "id": 1, "layoutId": "main", ... },
         *      "sidebar": { "id": 2, "layoutId": "sidebar", ... }
         *  }
         */
        $mapped = collect($resources)->mapWithKeys(fn($grid) => [$grid['layoutId'] => $grid]);

        return $this->success($mapped);
    }

    /**
     * Store a new grid for the authenticated user.
     *
     * ensure config keys are sorted and cannot be saved more than once
     * ensure name cannot be saved more than once
     */
    public function store(SaveNewGridRequest $request)
    {
        $result = $request->applySave();

        // Falls es sich um ein JsonResponse (Fehler) handelt:
        if ($result instanceof JsonResponse) {
            return $result;
        }

        return $this->success($result->resolve(), 'Grid erfolgreich erstellt.', 201);
    }

    public function show(string $id)
    {
        $grid = Grid::where('user_id', Auth::id())->findOrFail($id);
        $this->authorize('view', $grid);

        $resource = (new GridResource($grid))->resolve();
        $resource['layoutId'] = $resource['layout_id'];
        unset($resource['layout_id']);

        return $this->success($resource);
    }

    public function update(Request $request, string $id)
    {
        $grid = Grid::where('user_id', Auth::id())->findOrFail($id);
        $this->authorize('update', $grid);

        $validated = $request->validate([
            'name' => 'sometimes|string|max:255',
            'config' => 'sometimes|array',
            'timestamp' => 'sometimes|date',
        ]);

        $grid->update($validated);

        $resource = (new GridResource($grid))->resolve();

        return $this->success($resource, 'Grid erfolgreich aktualisiert.');
    }

    public function updateByLayout(UpdateByLayoutIdRequest $request, string $layoutId)
    {
        $grid = $request->applyUpdate();
        return $this->success((new GridResource($grid))->resolve(), 'Grid name successfully updated.');
    }


    public function destroyByLayout(DeleteByLayoutIdRequest $request, string $layoutId)
    {
        $grid = $request->applyDelete();
        return $this->success([], 'Grid erfolgreich gelöscht.', 204);
    }

    public function resetUserGrids(ResetUserGridsRequest $request, int $userId)
    {
        $request->applyReset();
        return $this->success([], 'Alle Grids erfolgreich gelöscht.', 204);
    }

}
