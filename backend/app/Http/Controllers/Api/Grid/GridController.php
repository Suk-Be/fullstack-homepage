<?php

namespace App\Http\Controllers\Api\Grid;

use App\Http\Controllers\Controller;
use App\Models\Grid;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Http\Resources\GridResource;
use App\Traits\ApiResponses;

class GridController extends Controller
{
    use ApiResponses;
    /**
     * Display the authenticated user's grids as JSON, keyed by layoutId,
     * with the latest entries first.
     */
    public function index()
    {
        // gets all grid from authenticated user
        $grids = Auth::user()->grids()->latest()->get();

        /**
         * creates an array from $grids
         *  [
         *      { "id": 1, "layoutId": "main", ... },
         *      { "id": 2, "layoutId": "sidebar", ... }
         *  ]
         */
        $resources = GridResource::collection($grids)->resolve();

        /**
         *  maps array items to object with keys generated by values of layoutId
         *  {
         *      "main": { "id": 1, "layoutId": "main", ... },
         *      "sidebar": { "id": 2, "layoutId": "sidebar", ... }
         *  }
         */
        $mapped = collect($resources)->mapWithKeys(fn($grid) => [$grid['layoutId'] => $grid]);

        return $this->success($mapped);
    }

    /**
     * Store a new grid for the authenticated user.
     *
     * ensure config keys are sorted and cannot be saved more than once
     * ensure name cannot be saved more than once
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'layoutId' => 'required|uuid',
            'name' => 'nullable|string|max:255',
            'config' => 'required|array',
            'timestamp' => 'required|date',
        ]);

        $sortedConfig = $validated['config'];
        ksort($sortedConfig);
        $encodedConfig = json_encode($sortedConfig);

        $gridData = [
            'layout_id' => $validated['layoutId'],
            'name' => $validated['name'],
            'config' => $validated['config'],
            'timestamp' => $validated['timestamp'],
        ];

        $existsByLayoutId = Auth::user()
            ->grids()
            ->where('layout_id', $validated['layoutId'])
            ->exists();

        if ($existsByLayoutId) {
            return $this->error('A grid with the same layoutId already exists.');
        }

        $existsByLayoutConfig = Auth::user()
            ->grids()
            ->where('config', $encodedConfig)
            ->exists();

        if ($existsByLayoutConfig) {
            return $this->error('A grid with the same configuration already exists.');
        }

        $existsByLayoutName = Auth::user()
            ->grids()
            ->where('name', $validated['name'])
            ->exists();

        if ($existsByLayoutName) {
            return $this->error('A grid with the same name already exists.');
        }

        $grid = Auth::user()->grids()->create($gridData);
        return $this->success(new GridResource($grid), 'Grid erfolgreich erstellt.', 201);
    }


    /**
     * Show a specific grid belonging to the authenticated user.
     */
    public function show(string $id)
    {
        $grid = Grid::where('user_id', Auth::id())->findOrFail($id);
        $this->authorize('view', $grid);

        $resource = (new GridResource($grid))->resolve();
        $resource['layoutId'] = $resource['layout_id'];
        unset($resource['layout_id']);

        return $this->success($resource);
    }

    /**
     * Update a specific grid belonging to the authenticated user.
     */
    public function update(Request $request, string $id)
    {
        $grid = Grid::where('user_id', Auth::id())->findOrFail($id);
        $this->authorize('update', $grid);

        $validated = $request->validate([
            'name' => 'sometimes|string|max:255',
            'config' => 'sometimes|array',
            'timestamp' => 'sometimes|date',
        ]);

        $grid->update($validated);

        $resource = (new GridResource($grid))->resolve();

        return $this->success($resource, 'Grid erfolgreich aktualisiert.');
    }

    /**
     * Delete a grid by its layoutId, if owned by the authenticated user.
     */
    public function destroyByLayout(string $layoutId)
    {
        $grid = Grid::where('layout_id', $layoutId)->firstOrFail();
        $this->authorize('delete', $grid);

        $grid->delete();
        return $this->success([], 'Grid erfolgreich gelöscht.', 204);
    }

    /**
     * Reset all grids for a specific user (admin only).
     */
    public function resetUserGrids(int $userId)
    {
        $user = User::findOrFail($userId);
        $this->authorize('reset', $user);

        Grid::where('user_id', $userId)->delete();
        return $this->success([], 'Alle Grids erfolgreich gelöscht.', 204);
    }
}