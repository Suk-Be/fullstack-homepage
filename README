README

Docker Desktop

### Projektverzeichnis #

project-root/
â”‚
â”œâ”€â”€ backend/ # Laravel
â”‚ â”œâ”€â”€ Dockerfile
â”‚ â”œâ”€â”€ composer.json
â”‚ â”œâ”€â”€ composer.lock
â”‚ â”œâ”€â”€ .env
â”‚ â””â”€â”€ ...
â”‚
â”œâ”€â”€ frontend/ # React/Vue/Vite
â”‚ â”œâ”€â”€ Dockerfile
â”‚ â”œâ”€â”€ package.json
â”‚ â”œâ”€â”€ package-lock.json
â”‚ â””â”€â”€ ...
â”‚
â”œâ”€â”€ mailpit/ # Mail Dev (eigene Config optional, sonst nur Service in compose)
â”‚
â””â”€â”€ docker-compose.yml

### run containers with docker-compose with three settings #

# Nur Backend + Mailpit containers:
# im backend Verzeichnis env Variable DB_HOST umstellen
# DB_HOST=DB_HOST=db statt DB_HOST=127.0.0.1
docker-compose --profile backend --profile mailpit up
# frontend ohne container
npm run dev

# Nur frontend container:
docker-compose --profile frontend up
# im backend Verzeichnis env Variable DB_HOST umstellen
# DB_HOST=DB_HOST=127.0.0.1 statt DB_HOST=db
php artisan serve 

# Alle container:
docker-compose --profile backend --profile frontend --profile mailpit up

### docker-compose.yml #

# Es gibt 5 services die in containern laufen und AbhÃ¤ngigkeiten (depends_on) haben 

- app (http server)
- db (mysql db)
- phpMyAdmin (mysql ui)
- frontend (app ui)
- mailpit (mail dev server)

# Anpassungen in der env fÃ¼r laravel
Die db erhÃ¤lt den Namen aus docker-compose fÃ¼r den db container und nicht mehr die der Maschine
# DB_HOST=127.0.0.1 # name der Maschine fÃ¼r die Entwicklung ohne docker container
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=sanctum_cookie
DB_USERNAME=laravel
DB_PASSWORD=secret

# docker-compose.yml braucht der db service container Zugang zur Datenbank
db:
  ...
  container_name: mysql_db
  ...
  environment:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: sanctum_cookie
    MYSQL_USER: laravel
    MYSQL_PASSWORD: secret
  ports:
      - '3306:3306'
    volumes:
      - db_data:/var/lib/mysql
    profiles:
      - backend

phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    restart: always
    ports:
      - '8080:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: root
    depends_on:
      - db
    profiles:
      - backend


### phpmyadmin im browser #

# ui
http://localhost:8080/

# login
DB_USERNAME=laravel
DB_PASSWORD=secret # standard password

### frontend viteconfig und package.json #
host musss umbenannt werde, zuvor war der Rechner/Machine eingetrage mit 127.0.0.1. Auf 0.0.0.0 umstellen, damit container als auch machine und container ansgesprochen werden kÃ¶nnen.

# vite.config
server: {
host: '0.0.0.0', // <- wichtig, sonst nur localhost erreichbar
port: 5173,
strictPort: true, // verhindert automatisches HochzÃ¤hlen des Ports
# ...
},

### Aufrufe im Browser

# phpMyAdmin
http://localhost:8080/
FÃ¼r credentials, siehe env Daten:
user: laravel
pw: secret

# frontend
http://localhost:5173/

# mailpit
http://localhost:8025/

### Cheatsheet: Interaktion mit Inhalten von containern

# backend
docker exec -it laravel_app php artisan config:clear
docker exec -it laravel_app php artisan cache:clear
docker exec -it laravel_app php artisan config:cache

# mysql
docker exec -it laravel_app php artisan migrate:fresh --seed

# mail
docker exec -it laravel_app php artisan queue:work

# frontend 
docker exec -it vite_frontend npm run test

# ErklÃ¤rung des Befehls:

- docker exec: FÃ¼hrt einen Befehl in einem laufenden Container aus.
- -it: ErmÃ¶glicht die interaktive Eingabe (-i) und weist ein Pseudo-Terminal zu (-t), damit du das Passwort eingeben kannst.
- laravel_app: Der Name deines Containers.
- php artisan config:clear: der laravel Befehl

### Cheatsheet: update container

# alle container services neu bauen
docker-compose up --build -d

# So funktioniert der Befehl ðŸš€
up: Stellt die Dienste in deiner docker-compose.yml Datei bereit und startet sie.
--build: Dieses Flag ist entscheidend. Es zwingt Docker Compose, die Images neu zu erstellen, bevor es die Container startet. Das stellt sicher, dass alle Ã„nderungen, die du an den Quellcodedateien oder an deinem Dockerfile vorgenommen hast, in das neue Image Ã¼bernommen werden.
-d: Startet die Container im "Detached"-Modus, also im Hintergrund, damit dein Terminal nicht blockiert wird.

Dieser Befehl stoppt automatisch die alten Container, entfernt sie und startet die neuen mit den aktualisierten Images.

### Cheatsheet:  remove containers

# container anzeigen
docker ps -a

# So funktioniert der Befehl ðŸš€
ps: zeigt laufende container an
-a: zeigt alle container an

Dieser Befehl zeigt alle container in einer Tabelle an, man sieht id, name, beschreibung

# Beispiel Anzeige der container
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES

e729de77d3ec spa-backend "docker-php-entrypoiâ€¦" 15 minutes ago Up 15 minutes 0.0.0.0:8000->80/tcp, [::]:8000->80/tcp laravel_app
9710fdfbbb4e spa-frontend "docker-entrypoint.sâ€¦" 2 hours ago Exited (1) 17 minutes ago vite_frontend
be6724b1effd phpmyadmin/phpmyadmin "/docker-entrypoint.â€¦" 2 hours ago Up 15 minutes 0.0.0.0:8080->80/tcp, [::]:8080->80/tcp pma
6435d88d4efc axllent/mailpit "/mailpit" 2 hours ago Up 15 minutes (healthy) 0.0.0.0:1025->1025/tcp, [::]:1025->1025/tcp, 0.0.0.0:8025->8025/tcp, [::]:8025->8025/tcp mailpit
1febc1b423f9 mysql:8.0 "docker-entrypoint.sâ€¦" 2 hours ago Up 15 minutes 0.0.0.0:3306->3306/tcp, [::]:3306->3306/tcp mysql_db
d501e26dc198 httpd:latest "httpd-foreground" 8 hours ago Exited (0) 7 hours ago apache_server
39e07dd16539 mysql:8.0 "docker-entrypoint.sâ€¦" 8 hours ago Exited (0) 7 hours ago mysql_server

# container erntfernen
docker rm <id | name>

# So funktioniert der Befehl ðŸš€
rm: entfernt einen container, der muss allerdings benannt sein
<id|name>: entfernt benannten container

# Beispiel: Dieser Befehl entfernt den backend container:
docker rm e729de77d3ec
# macht das gleiche
docker rm laravel_app


### Cheatsheet: container mit profile ansprechen felxibel ansprechen

profiles:

- backend
- frontend
- mailpit

# Beispiel backend profile starten

docker-compose --profile backend --profile mailpit up -d


# Beispiel Frontend neu bauen inkl. aller AbhÃ¤ngigkeiten

docker compose --profile backend --profile mailpit --profile frontend build frontend

# Beispiel alle container starten: frontend, backend, db, phpmyadmin und mailpit

docker compose --profile backend --profile mailpit --profile frontend up -d frontend

# Beispiel: alle container laufen und frontend-Logs anzeigen

docker compose --profile backend --profile mailpit --profile frontend logs -f frontend


### Cheatsheet: lokale Entwicklung react und laravel

# backend - docker backend containers mit depends starten

docker-compose --profile backend --profile mailpit up -d

In Docker Desktop laravel_app stoppen
die mysql db und mail pit laufen dann noch in containern
Im Verzeichnis backend: In den laravel environment Variablen die db umstellen. Den DB_HOST auf 127.0.0.1 umstellen (Kommentar entfernen bzw. einstellen fÃ¼r db). Damit kann laravel die sql lesen.

# laravel starten
php artisan serve

# laravel queue starten, um die mails zu verarbeiten
php artisan queue:work

# frontend 

Die obigen Schritte vorausgesetzt, braucht es nur noch die laufende frontend app

Im Verzeichnis frontend in der Konsole: npm run dev